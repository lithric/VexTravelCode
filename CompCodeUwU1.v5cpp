{"mode":"Text","textContent":"// ----------------------------------------------------------------------------\n//                                                                            \n//    Project:                                               \n//    Author:\n//    Created:\n//    Configuration:        \n//                                                                            \n// ----------------------------------------------------------------------------\n\n// Include the V5 Library\n#include \"vex.h\"\n#include <math.h>\n#include <cmath>\n#include <string>\n#include <tgmath.h>\n\n// Allows for easier use of the VEX Library\nusing namespace vex;\n\n// Begin project code\n\nvoid preAutonomous(void) {\n  // actions to do when the program starts\n  Brain.Screen.clearScreen();\n  Brain.Screen.print(\"pre auton code\");\n  wait(1, seconds);\n}\n\nclass Custom {\n#define _USE_MATH_DEFINES\n#define ForwardFor(a) spinFor(forward,(2*a/wheelDiam)*180/M_PI,degrees, false);localTime = a*100/globalVelocity\n#define ReverseFor(a) spinFor(reverse,(2*a/wheelDiam)*180/M_PI,degrees, false);localTime = a*100/globalVelocity\n    public:\n    double MaxMotorSpeed = 200;\n    double globalVelocity = 300;\n    int globalPercVel = 50;\n    double wheelDiam = 10.16;\n    double localTime = 0;\n    double botDiam = 38;\n    double accelerate = 60;\n    void SetGlobalVelocity(int vel = -1) {\n        if (vel < 0) {\n            vel = globalPercVel;\n        }\n        Left.setVelocity(vel,percent);\n        Right.setVelocity(vel,percent);\n        Middle.setVelocity(vel,percent);\n        globalVelocity = (wheelDiam*M_PI*vel/100)*200;\n    }\n\n    void Forward(double d) {\n        Left.ForwardFor(d);\n        Right.ReverseFor(d);\n    }\n\n    void Back(double d) {\n        Left.ReverseFor(d); //D=Distance \n        Right.ForwardFor(d);\n    }\n\n    void Righto(double d) {\n        Middle.ForwardFor(d);\n    }\n\n    void Lefto(double d) {\n        Middle.ReverseFor(d);\n    }\n\n    // \"when started\" hat block\n    int whenStarted1() {\n        SetGlobalVelocity(globalPercVel);\n        return 0;\n    }\n\n    void Turn(double deg) {\n        Left.setPosition(0,degrees);\n        Right.setPosition(0,degrees);\n        double botCirc = botDiam * M_PI;\n        double perc = std::abs(deg/360);\n        double d = perc * botCirc;\n        if (deg > 0) {\n            Left.ForwardFor(d);\n            Right.ReverseFor(d);\n        }\n        else if (deg < 0) {\n            Left.ForwardFor(d);\n            Right.ReverseFor(d);\n        }\n        Left.setPosition(0,degrees);\n        Right.setPosition(0,degrees);\n    }\n\n    void GradualStop(std::string option) {\n        int i = globalPercVel;\n        if (option == \"forward\") {\n            while (i >= 1) {\n                    i = i-1;\n                    SetGlobalVelocity(i);\n                    Left.spin(forward);\n                    Right.spin(forward);\n                    wait(2/accelerate,seconds);\n                    globalPercVel = i;\n                }\n            Left.stop();\n            Right.stop();\n            Left.setPosition(0,degrees);\n            Right.setPosition(0,degrees);\n        }\n        else if (option == \"back\") {\n            while (i >= 1) {\n                    i = i-1;\n                    SetGlobalVelocity(i);\n                    Left.spin(reverse);\n                    Right.spin(reverse);\n                    wait(2/accelerate,seconds);\n                    globalPercVel = i;\n                }\n            Left.stop();\n            Right.stop();\n            Left.setPosition(0,degrees);\n            Right.setPosition(0,degrees);\n        }\n        else if (option == \"right\") {\n            while (i >= 1) {\n                    i = i-1;\n                    SetGlobalVelocity(i);\n                    Middle.spin(forward);\n                    wait(2/accelerate,seconds);\n                    globalPercVel = i;\n                }\n            Middle.stop();\n            Middle.setPosition(0,degrees);\n        }\n        else if (option == \"left\") {\n            while (i >= 1) {\n                    i = i-1;\n                    SetGlobalVelocity(i);\n                    Middle.spin(reverse);\n                    wait(2/accelerate,seconds);\n                    globalPercVel = i;\n                }\n            Middle.stop();\n            Middle.setPosition(0,degrees);\n        }\n        else if (option == \"clockwise\") {\n            while (i >= 1) {\n                    i = i-1;\n                    SetGlobalVelocity(i);\n                    Left.spin(forward);\n                    Right.spin(reverse);\n                    wait(2/accelerate,seconds);\n                    globalPercVel = i;\n                }\n            Left.stop();\n            Right.stop();\n            Left.setPosition(0,degrees);\n            Right.setPosition(0,degrees);\n        }\n        else if (option == \"anti-clockwise\") {\n            while (i >= 1) {\n                    i = i-1;\n                    SetGlobalVelocity(i);\n                    Left.spin(reverse);\n                    Right.spin(forward);\n                    wait(2/accelerate,seconds);\n                    globalPercVel = i;\n                }\n            Left.stop();\n            Right.stop();\n            Left.setPosition(0,degrees);\n            Right.setPosition(0,degrees);\n        }\n    } // options: forward, back, right, left\n\n    void GradualForward(int vel,double dist = 0,bool empty = true) {\n        Left.setPosition(0,degrees);\n        Right.setPosition(0,degrees);\n        SetGlobalVelocity(1);\n        int i = 1;\n        double degr = (2*dist/wheelDiam)*180/M_PI;\n        Brain.Screen.print(Left.rotation(deg));\n        while(i < vel && Left.rotation(deg)+Right.rotation(deg) < degr*2) {\n            SetGlobalVelocity(i);\n            i++;\n            Left.spin(forward);\n            Right.spin(forward);\n            wait(2/accelerate,seconds);\n            globalPercVel = i;\n        }\n        Left.setPosition(0,degrees);\n        Right.setPosition(0,degrees);\n        if (empty) {\n            while(Left.rotation(deg)+Right.rotation(deg) < degr*2) {\n                wait(0.01,seconds);\n            }\n            GradualStop(\"forward\");\n        }\n    }\n\n    void GradualBack(int vel,double dist = 0,bool empty = true) {\n        Left.setPosition(0,degrees);\n        Right.setPosition(0,degrees);\n        SetGlobalVelocity(1);\n        int i = 1;\n        double degr = (2*dist/wheelDiam)*180/M_PI;\n        while(i < vel && -Left.rotation(deg)-Right.rotation(deg) < degr*2) {\n            SetGlobalVelocity(i);\n            i++;\n            Left.spin(reverse);\n            Right.spin(reverse);\n            wait(2/accelerate,seconds);\n            globalPercVel = i;\n        }\n        Left.setPosition(0,degrees);\n        Right.setPosition(0,degrees);\n        if (empty) {\n            while(-Left.rotation(deg)-Right.rotation(deg) < degr*2) {\n                wait(0.01,seconds);\n            }\n            GradualStop(\"back\");\n        }\n    }\n\n    void GradualRight(int vel,double dist = 0,bool empty = true) {\n        Middle.setPosition(0,degrees);\n        SetGlobalVelocity(1);\n        int i = 1;\n        double degr = (2*dist/wheelDiam)*180/M_PI;\n        while(i < vel && Middle.rotation(deg) < degr*2) {\n            SetGlobalVelocity(i);\n            i++;\n            Middle.spin(forward);\n            wait(2/accelerate,seconds);\n            globalPercVel = i;\n        }\n        Middle.setPosition(0,degrees);\n        if (empty) {\n            while(Middle.rotation(deg) < degr*2) {\n                wait(0.01,seconds);\n            }\n            GradualStop(\"right\");\n        }\n    }\n\n    void GradualLeft(int vel,double dist = 0,bool empty = true) {\n        Middle.setPosition(0,degrees);\n        SetGlobalVelocity(1);\n        int i = 1;\n        double degr = (2*dist/wheelDiam)*180/M_PI;\n        while(i < vel && -Middle.rotation(deg) < degr*2) {\n            SetGlobalVelocity(i);\n            i++;\n            Middle.spin(reverse);\n            wait(2/accelerate,seconds);\n            globalPercVel = i;\n        }\n        Middle.setPosition(0,degrees);\n        if (empty) {\n            while(-Middle.rotation(deg) < degr*2) {\n                wait(0.01,seconds);\n            }\n            GradualStop(\"left\");\n        }\n    }\n\n    void GradualTurn(int vel, double dist = 0, bool empty = true) {\n        if (vel > 0) {\n            Left.setPosition(0,degrees);\n            Right.setPosition(0,degrees);\n            SetGlobalVelocity(1);\n            int i = 1;\n            double degr = (2*dist/wheelDiam)*180/M_PI;\n            Brain.Screen.print(Left.rotation(deg));\n            while(i < vel && Left.rotation(deg)-Right.rotation(deg) < degr*2) {\n                SetGlobalVelocity(i);\n                i++;\n                Left.spin(forward);\n                Right.spin(reverse);\n                wait(2/accelerate,seconds);\n                globalPercVel = i;\n            }\n            Left.setPosition(0,degrees);\n            Right.setPosition(0,degrees);\n            if (empty) {\n                while(Left.rotation(deg)-Right.rotation(deg) < degr*2) {\n                    wait(0.01,seconds);\n                }\n                GradualStop(\"clockwise\");\n            }\n        }\n        else if (vel < 0) {\n            Left.setPosition(0,degrees);\n            Right.setPosition(0,degrees);\n            SetGlobalVelocity(1);\n            int i = 1;\n            double degr = (2*dist/wheelDiam)*180/M_PI;\n            Brain.Screen.print(Left.rotation(deg));\n            while(i < vel && -Left.rotation(deg)+Right.rotation(deg) < degr*2) {\n                SetGlobalVelocity(i);\n                i++;\n                Left.spin(reverse);\n                Right.spin(forward);\n                wait(2/accelerate,seconds);\n                globalPercVel = i;\n            }\n            Left.setPosition(0,degrees);\n            Right.setPosition(0,degrees);\n            if (empty) {\n                while(-Left.rotation(deg)+Right.rotation(deg) < degr*2) {\n                    wait(0.01,seconds);\n                }\n                GradualStop(\"anti-clockwise\");\n            }\n        }\n    }\n};\nvoid autonomous(void) {\n  Brain.Screen.clearScreen();\n  Brain.Screen.print(\"autonomous code\");\n#define printB(a) Brain.Screen.print(a)\n#define The\n#define Then wait(localTime,seconds)\n#define And ;\n#define Go\n#define To\n\ndouble localTime = 1;\n\nint Brain_precision = 0, Console_precision = 0;\n    Left.stop();\n    Right.stop();\n    Middle.stop();\n\n  Custom act;\n\n  act.botDiam = 38;\n  act.wheelDiam = 10.16;\n  act.globalPercVel = 50;\n  act.accelerate = 60;\n  act.SetGlobalVelocity();\n  //di = 20cm\n  //circ = di*pi\n  //d = (deg*pi/180)*di/2\n  //if di is measured in centimeters\n  //d will be in centimeters as a result\n  //rpm\n  //centimeters\n  //tape width = 2cm\n  //large tile = 62cm\n  //small tile = 58cm\n  //med tile = 60cm\n  //to tape = 116cm\n  //tape gap = 2cm\n  // velocity per degree\n  // distance per velocity\n  // what is the distance traveled when stopping at each level of velocity\n  /*\n  act.GradualForward(60,10);\n  act.GradualRight(60,10);\n  act.Turn(90);\n  Then;\n  act.GradualForward(60,10);\n  */\n  \n  //t = ((d-2*pow(v_f-v_i,2)/accelerate)/v_f)+2*((v_f-v_i)/accelerate);\n  //wait(t,seconds);\n  // dynamic motor command structure\n  //motor(50,100),motor(100,20) => motor(150,120)\n}\n\nvoid userControl(void) {\n  Brain.Screen.clearScreen();\n  // place driver control in this while loop\n  while (true) {\n    wait(20, msec);\n    while(true) {\n    //drive wheels\n      Left.spin(vex::directionType::fwd, Controller1.Axis3.value(), vex::velocityUnits::pct);\n      Right.spin(vex::directionType::fwd, Controller1.Axis2.value(), vex::velocityUnits::pct);\n      Middle.spin(vex::directionType::fwd, Controller1.Axis4.value(), vex::velocityUnits::pct);\n      //Arm\n      //Raise arm\n        if(Controller1.ButtonL1.pressing()) {\n            Arm.spin(directionType::fwd);\n        }\n            //lower arm\n          else if(Controller1.ButtonL2.pressing()) {\n            Arm.spin(directionType::rev);\n          }\n            //hold arm\n          else {\n            Arm.stop(hold);\n          }\n\n\n        //wrist\n            //raise wrist\n        if(Controller1.ButtonR1.pressing()) {\n            Wrist.spin(directionType::fwd);\n        }\n            //lower wrist\n          else if(Controller1.ButtonR2.pressing()) {\n            Wrist.spin(directionType::rev);\n          }\n            //hold wrist\n          else {\n            Wrist.stop(hold);\n          }\n\n\n        //Pitchfork1\n            //Open\n        if (Controller1.ButtonA.pressing()) {\n            Pitchfork1.spin(directionType::fwd);\n        }\n            //Close\n          else if(Controller1.ButtonB.pressing()) {\n              Pitchfork1.spin(directionType::rev);\n          }\n            //hold claw\n          else {\n              Pitchfork1.stop(hold);\n          }\n    }\n  }\n}\n\nint main() {\n  // create competition instance\n  competition Competition;\n\n  // Set up callbacks for autonomous and driver control periods.\n  Competition.autonomous(autonomous);\n  Competition.drivercontrol(userControl);\n\n  // Run the pre-autonomous function.\n  preAutonomous();\n\n  // Prevent main from exiting with an infinite loop.\n  while (true) {\n    wait(100, msec);\n  }\n}","textLanguage":"cpp","rconfig":[{"port":[1],"name":"Left","customName":true,"deviceType":"Motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[2],"name":"Right","customName":true,"deviceType":"Motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[3],"name":"Middle","customName":true,"deviceType":"Motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[8],"name":"Arm","customName":true,"deviceType":"Motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[9],"name":"Wrist","customName":true,"deviceType":"Motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio36_1"},"triportSourcePort":22},{"port":[10],"name":"Pitchfork1","customName":true,"deviceType":"Motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio36_1"},"triportSourcePort":22},{"port":[],"name":"Controller1","customName":false,"deviceType":"Controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20210708.10.00.00","appVersion":"2.0.8","fileFormat":"1.0.0","icon":""}