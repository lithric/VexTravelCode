{"mode":"Text","textContent":"// ----------------------------------------------------------------------------\n//                                                                            \n//    Project:                                               \n//    Author:\n//    Created:\n//    Configuration:        \n//                                                                            \n// ----------------------------------------------------------------------------\n\n// Include the V5 Library\n#include \"vex.h\"\n#include <iostream>\n#include <math.h>\n#include <cmath>\n#include <string>\n#include <tgmath.h>\n#include <thread>\n#include <vector>\n#include <map>\n\n// define some useful changes\n#define Then wait(act.localTime * 2.4,seconds)\n#define _USE_MATH_DEFINES\n\n#define anon(EXP) []() -> void{EXP;}\n\n#define printB(a) Brain.Screen.print(a);Brain.Screen.newLine()\n#define insertB(a,b) Brain.Screen.clearLine(a);Brain.Screen.setCursor(a,1);Brain.Screen.print(b)\n#define clearB(a) Brain.Screen.clearLine(a);\n\n#define __drive(a) {\"drive\", std::vector<double>(a)}\n#define __speed(a) {\"speed\", std::vector<double>(a)}\n#define __turn(a) {\"turn\", std::vector<double>(a)}\n#define __strafe(a) {\"strafe\", std::vector<double>(a)}\n\n// Allows for easier use of the VEX Library\nusing namespace vex;\n\n// assign global variables\n    double rampThreshold = 20; // 20deg\n    bool debugMode = false;\n    std::vector<bool> singleAct = {false,false,false,false,false,false};\n    int debugVal = 0;\n    double MaxMotorSpeed = 200; // 200rpm\n    double globalVelocity = 200; // 200rpm\n    double globalAcceleration = 60; // 60cm/s^2\n    double wheelDiam = 10.16;\n    double localTime = 0.00;\n    double botDiam = 39;\n    double driveVel = 100;\n//\n\n// Begin project code\n\nvoid preAutonomous(void) {\n  // actions to do when the program starts\n  Brain.Screen.clearScreen();\n  Brain.Screen.print(\"pre auton code\");\n  wait(1, seconds);\n}\n\nclass DriveInstructions {\n    public:\n    std::map<std::string,std::vector<double>> instructions;\n    void start() {\n        for (auto const& instruct : instructions) {\n            auto key = instruct.first;\n            auto val = instruct.second;\n            char bank[6];\n            for (int i=0; i<key.length(); i++) {\n                bank[i] = key[i];\n            }\n            Brain.Screen.print(bank);\n            if (key == \"speed\") {\n                Drivetrain.setDriveVelocity(val[0],percent);\n            }\n            else if (key == \"drive\") {\n                Drivetrain.driveFor(val[0] > 0 ? forward:reverse,std::abs(val[0]),mm);\n            }\n            else if (key == \"turn\") {\n                Drivetrain.turnFor(val[0] > 0 ? right:left,std::abs(val[0]),degrees);\n            }\n        }\n    }\n};\nvoid autonomous(void) {\n  Brain.Screen.clearScreen();\n  Brain.Screen.print(\"autonomous code\");\nint Brain_precision = 0, Console_precision = 0;\n    DriveInstructions beginning;\n    beginning.instructions = {\n      __speed(100),\n      __drive(20)\n    };\n    beginning.start();\n}\n\nvoid userControl(void) {\n  Brain.Screen.clearScreen();\n  // place driver control in this while loop\n  Arm.setVelocity(50,percent);\n  Drivetrain.setDriveVelocity(100,percent);\n  while (true) {\n    wait(20, msec);\n    while(true) {\n        Controller1.ButtonY.pressed( anon(singleAct[0] = true) );\n        Controller1.ButtonY.released( anon(if(singleAct[0]){debugMode = !debugMode; printB(debugMode ? \"Debug Mode ON\":\"Debug Mode OFF\");singleAct[0] = false;}) );\n\n        Controller1.ButtonX.pressed( anon(singleAct[1] = true) );\n        Controller1.ButtonX.released( anon(if(singleAct[1] && debugMode){Brain.Screen.clearScreen();singleAct[1] = false;}) );\n        Controller1.ButtonL1.pressed( anon(singleAct[2] = true) );\n        Controller1.ButtonL1.released( anon(if(singleAct[2] && debugMode){printB(\"hello\");singleAct[2] = false;}) );\n        Controller1.ButtonR1.pressed( anon(singleAct[3] = true) );\n        Controller1.ButtonR1.released( anon(if(singleAct[3] && debugMode){driveVel += 5;insertB(1,driveVel);singleAct[3] = false;}) );\n        Controller1.ButtonR2.pressed( anon(singleAct[4] = true) );\n        Controller1.ButtonR2.released( anon(if(singleAct[4] && debugMode){driveVel -= 5;insertB(1,driveVel);singleAct[4] = false;}) );\n\n        if (!debugMode) {\n            Controller1.ButtonUp.pressed( anon(StickyPiston = !StickyPiston) );\n            Controller1.ButtonL1.pressing() ? Arm.spin(forward):\n            Controller1.ButtonL2.pressing() ? Arm.spin(reverse):\n            Arm.stop(hold);\n        }\n    }\n  }\n}\n\nint main() {\n  // create competition instance\n  competition Competition;\n\n  // Set up callbacks for autonomous and driver control periods.\n  Competition.autonomous(autonomous);\n  Competition.drivercontrol(userControl);\n\n  // Run the pre-autonomous function.\n  preAutonomous();\n\n  // Prevent main from exiting with an infinite loop.\n  while (true) {\n    wait(100, msec);\n  }\n}","textLanguage":"cpp","rconfig":[{"port":[],"name":"Controller1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"tank","id":"primary"},"triportSourcePort":22},{"port":[6],"name":"Enert","customName":true,"deviceType":"Inertial","deviceClass":"inertial","setting":{"id":"partner"},"triportSourcePort":22},{"port":[1],"name":"StickyPiston","customName":true,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{"id":"partner"},"triportSourcePort":22},{"port":[1,2,10,9,4],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"4-motor","wheelSize":"wheel4in","gear":"ratio18_1","gearRatio":"1:1","direction":"fwd","gyroType":"inertial","width":"295","unit":"mm","wheelbase":"40","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"}},{"port":[3,8],"name":"Arm","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio18_1","motor_a_reversed":"true","motor_b_reversed":"false"}}],"slot":0,"platform":"V5","sdkVersion":"20210708.10.00.00","appVersion":"2.2.0","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","target":"Physical"}