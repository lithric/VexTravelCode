{"mode":"Text","textContent":"// ----------------------------------------------------------------------------\n//                                                                            \n//    Project:                                               \n//    Author:\n//    Created:\n//    Configuration:        \n//                                                                            \n// ----------------------------------------------------------------------------\n\n// Include the V5 Library\n#include \"vex.h\"\n#include <math.h>\n#include <cmath>\n#include <string>\n#include <tgmath.h>\n#include <thread>\n#include <vector>\n#include <map>\n#include <typeinfo>\n// cout << typeid(variable).name() << endl;\n\n// namespaces and imported methods\nusing namespace vex;\nusing std::vector;\nusing std::string;\nusing std::map;\nusing std::abs;\n\n// define some useful changes\n#define RESERVE(key,val) key = val;auto RESERVE_ACT\n\n#define _USE_MATH_DEFINES\n\n#define anon(EXP) []() -> void{EXP;}\n#define func(type,EXP) () -> type{EXP;}\n#define opper(a,...) {vector<double>{a}, vector<double>{__VA_ARGS__}}\n#define toggle(key,id) key.pressed( anon(singleAct[id] = true) )\n\n#define setActionVelocity(act,...) set ## act ## Velocity(__VA_ARGS__)\n#define actionFor(act,...) act ## For(__VA_ARGS__)\n\n#define printB(a) Brain.Screen.print(a);Brain.Screen.newLine()\n#define replaceB(a,b) Brain.Screen.clearLine(a);Brain.Screen.setCursor(a,1);Brain.Screen.print(b)\n#define clearB(a) Brain.Screen.clearLine(a)\n#define __drive(...) opper(0,__VA_ARGS__)\n#define __turn(...) opper(1,__VA_ARGS__)\n#define __grab(...) opper(2,__VA_ARGS__)\n#define __lift(...) opper(3,__VA_ARGS__)\n#define __wait(...) opper(4,__VA_ARGS__)\n#define __stop(...) opper(5,__VA_ARGS__)\n#define __chase(...) opper(6,__VA_ARGS__)\n#define printIf(cond,T,F) anon(if(cond){Brain.Screen.print(T);Brain.Screen.newLine();}else{Brain.Screen.print(F);Brain.Screen.newLine();})\n\n// assign global variables\n    double rampThreshold = 20; // 20deg\n    bool debugMode = false;\n    vector<bool> singleAct = {false,false,false,false,false,false};\n    int debugVal = 0;\n    double MaxMotorSpeed = 200; // 200rpm\n    double globalVelocity = 200; // 200rpm\n    double globalAcceleration = 60; // 60cm/s^2\n    double wheelDiam = 10.16;\n    double localTime = 0.00;\n    double botDiam = 39;\n    double driveVel = 100;\n    bool torqueMode = false;\n//\n\n// Begin project code\n\nvoid preAutonomous(void) {\n  // actions to do when the program starts\n  Brain.Screen.clearScreen();\n  Brain.Screen.print(\"pre auton code\");\n  wait(1, seconds);\n}\n\nclass DriveInstructions {\n    private:\n    public:\n    vector<vector<vector<double>>> instructions;\n    double speed = 20;\n    void start() {\n        for (auto const& instruct : instructions) {\n            vector<double> key = instruct[0];\n            vector<double> val = instruct[1];\n            switch ((int)key[0]) {\n                case 0: //__drive\n                    val.size() > 1 ?\n                    (void)Drivetrain.setDriveVelocity(val[1],percent):\n                    (void)Drivetrain.setDriveVelocity(speed,percent);\n                    abs(val[0]) > 0 ?\n                    (void)Drivetrain.driveFor(forward,val[0],inches):\n                    (void)Drivetrain.drive(val[2] > 0 ? forward:reverse);\n                    Drivetrain.setDriveVelocity(speed,percent);\n                break;\n                case 1: //__turn\n                    val.size() > 1 ?\n                    Drivetrain.setTurnVelocity(val[1],percent):\n                    Drivetrain.setTurnVelocity(speed,percent);\n                    if (abs(val[0]) > 0) {\n                        Drivetrain.turnFor(right,val[0],degrees);\n                    }\n                    else {\n                        Drivetrain.turn(val[2] > 0 ? right:left);\n                    }\n                    Drivetrain.setTurnVelocity(speed,percent);\n                break;\n                case 2: //__grab\n                    StickyPiston.set(val[0] == 1 ? true:false);\n                break;\n                case 3: //__lift\n                    val.size() > 1 ?\n                    Arm.setVelocity(val[1],percent):\n                    Arm.setVelocity(speed,percent);\n\n                    if (abs(val[0]) > 0) {\n                        Arm.spinFor(forward,val[0] * 7,degrees);\n                    }\n                    else {\n                        Arm.spin(val[2] > 0 ? forward:reverse);\n                    }\n                    Arm.setVelocity(speed,percent);\n                break;\n                case 4: //__wait\n                    wait(val[0],seconds);\n                break;\n                case 5: //__stop\n                    Drivetrain.stop();\n                break;\n                case 6: //__chase\n                    //Drivetrain.drive(forward);\n                    int centerFOV = 316/2; // the center of the screen\n                    int offsetX = 30; // offset to match the center of the bot\n                    map<string,int> objectBounds = {{\"left\",centerFOV+offsetX},{\"right\",centerFOV-offsetX}};\n                    int lastSeen = 100; // callback number to establish where object was last seen\n                    Eyeball.takeSnapshot(Eyeball__REDGOAL); // get data about where object is\n                    while(true) {\n                        // Eyeball.takeSnapshot(Eyeball__REDGOAL);\n                        // Eyeball.largestObject.exists ? \n                        // Eyeball.largestObject.width < val[0] ?\n                        // Eyeball.largestObject.centerX > objectBounds[\"left\"] ?\n                        // anon()\n                        // :\n                        // :\n                        // :\n                        if (Eyeball.largestObject.exists) {\n                            if (Eyeball.largestObject.width < val[0]) {\n                                if (Eyeball.largestObject.centerX > centerFOV + offsetX) {\n                                    LeftDriveSmart.spin(forward);RightDriveSmart.stop();\n                                    lastSeen = 1; // to the right\n                                }\n                                else if (Eyeball.largestObject.centerX < centerFOV - offsetX) {\n                                    LeftDriveSmart.stop();RightDriveSmart.spin(forward);\n                                    lastSeen = -1; // to the left\n                                }\n                                else {\n                                    LeftDriveSmart.spin(forward);RightDriveSmart.spin(forward);\n                                    lastSeen = 0; // straight ahead\n                                }\n                            }\n                            else {\n                                lastSeen = 100;\n                            }\n                        }\n                        else {\n                            switch(lastSeen) {\n                                case 1:\n                                    LeftDriveSmart.spin(forward);\n                                    RightDriveSmart.spin(reverse);\n                                break;\n                                case -1:\n                                    LeftDriveSmart.spin(reverse);\n                                    RightDriveSmart.spin(forward);\n                                break;\n                                case 0:\n                                    LeftDriveSmart.spin(forward);\n                                    RightDriveSmart.spin(forward);\n                                break;\n                                default:\n                                    LeftDriveSmart.stop();\n                                    RightDriveSmart.stop();\n                                break;\n                            }\n                        }\n                        wait(0.05,seconds);\n                    }\n                    Drivetrain.stop();\n                break;\n            }\n        }\n    }\n};\nvoid autonomous(void) {\n  Brain.Screen.clearScreen();\n  Brain.Screen.print(\"autonomous code\");\nint Brain_precision = 0;\nint Console_precision = 0;\n\n\n    DriveInstructions goingAroundTheField;\n    goingAroundTheField.speed = 100;\n\n    goingAroundTheField.instructions = {\n        __drive(145),\n        __turn(90),\n        // first turn made\n        __drive(40),\n        __turn(-90), // turning maneuver to get around the corner\n        __drive(13),\n        __turn(90), // back on track\n        // second turn made\n        __drive(200),\n        __turn(90),\n        // third turn made\n        __drive(200),\n        __turn(90),\n        // fourth turn made\n        __drive(200),\n    };\n\n    DriveInstructions grabSomething;\n    grabSomething.speed = 100;\n\n    grabSomething.instructions = {\n        __grab(0), // precautionary measure: opens the vice\n        __drive(43), // drive to goal fast\n        __drive(10,38), // slowly approach goal\n        __grab(1), // grab goal\n        __drive(-47), // drive back\n        __turn(90), // turn to move goal out of the way\n         __grab(0), // release goal\n        __turn(-117), // face the middle goal\n        __drive(48), // drive to goal fast\n        __drive(12,38), // slowly approach goal\n        __grab(1), // grab goal\n        __drive(-48), // drive back\n        __grab(0), // release goal\n        __drive(-8), // move away from goal\n    };\n\n    DriveInstructions testDrive;\n    testDrive.speed = 100;\n\n    testDrive.instructions = {\n        __chase(30)\n    };\n\n    //goingAroundTheField.start();\n    grabSomething.start();\n    //testDrive.start();\n}\n\nvoid userControl(void) {\n  Brain.Screen.clearScreen();\n  // place driver control in this while loop\n  Arm.setVelocity(50,percent);\n  Drivetrain.setDriveVelocity(100,percent);\n  while (true) {\n    wait(20, msec);\n    while(true) {\n        // on (Y) do {}\n        // on (Y) do {} debugPrint()\n        // on (Y) do {debugMode = !debugMode} then printIf(debugMode,\"Debug Mode ON\",\"Debug Mode OFF\");\n        Controller1.ButtonY.pressed( anon(singleAct[0] = true) );\n        Controller1.ButtonY.released( anon(\n                if(singleAct[0]) {\n                    debugMode = !debugMode;\n                    singleAct[0] = false;\n                    printB(debugMode ? \"Debug Mode ON\":\"Debug Mode OFF\");\n                }\n            ));\n        Controller1.ButtonX.pressed( anon(singleAct[1] = true) );\n        Controller1.ButtonX.released( anon(if(singleAct[1] && debugMode){Brain.Screen.clearScreen();singleAct[1] = false;}) );\n        Controller1.ButtonL1.pressed( anon(singleAct[2] = true) );\n        Controller1.ButtonL1.released( anon(if(singleAct[2] && debugMode){printB(\"hello\");singleAct[2] = false;}) );\n        Controller1.ButtonR1.pressed( anon(singleAct[3] = true) );\n        Controller1.ButtonR1.released( anon(if(singleAct[3] && debugMode){driveVel += 5;replaceB(1,driveVel);singleAct[3] = false;}) );\n        Controller1.ButtonR2.pressed( anon(singleAct[4] = true) );\n        Controller1.ButtonR2.released( anon(if(singleAct[4] && debugMode){driveVel -= 5;replaceB(1,driveVel);singleAct[4] = false;}) );\n\n        if (!debugMode) {\n            Controller1.ButtonUp.pressed( anon(StickyPiston = !StickyPiston) );\n            Controller1.ButtonL1.pressing() ? Arm.spin(forward):\n            Controller1.ButtonL2.pressing() ? Arm.spin(reverse):\n            Arm.stop(hold);\n            Controller1.ButtonX.pressed( anon(singleAct[5] = true) );\n            Controller1.ButtonX.released( anon(if (singleAct[5]) {torqueMode = !torqueMode;singleAct[5] = false;}) );\n            //Controller1.toggle(ButtonX,6).act();\n            if (torqueMode) {\n                Drivetrain.stop();\n                wait(100,msec);\n            }\n        }\n    }\n  }\n}\n\nint main() {\n  // create competition instance\n  competition Competition;\n\n  // Set up callbacks for autonomous and driver control periods.\n  Competition.autonomous(autonomous);\n  Competition.drivercontrol(userControl);\n\n  // Run the pre-autonomous function.\n  preAutonomous();\n\n  // Prevent main from exiting with an infinite loop.\n  while (true) {\n    wait(100, msec);\n  }\n}","textLanguage":"cpp","rconfig":[{"port":[],"name":"Controller1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"tank","id":"primary"},"triportSourcePort":22},{"port":[1],"name":"StickyPiston","customName":true,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{"id":"partner"},"triportSourcePort":22},{"port":[1,11,10,9,4],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"4-motor","wheelSize":"wheel4in","gear":"ratio18_1","gearRatio":"1:1","direction":"fwd","gyroType":"inertial","width":"295","unit":"mm","wheelbase":"40","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"},"triportSourcePort":null},{"port":[3,8],"name":"Arm","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio18_1","motor_a_reversed":"true","motor_b_reversed":"false"},"triportSourcePort":22},{"port":[15],"name":"Eyeball","customName":true,"deviceType":"Vision","deviceClass":"vision","setting":{"config":"{\"config\":{\"brightness\":51,\"signatures\":[{\"name\":\"REDGOAL\",\"parameters\":{\"uMin\":2099,\"uMax\":6643,\"uMean\":4371,\"vMin\":-877,\"vMax\":385,\"vMean\":-246,\"rgb\":1,\"type\":0,\"name\":\"REDGOAL\"},\"range\":0.9},{\"name\":\"SIG_2\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_2\"},\"range\":2.5},{\"name\":\"SIG_3\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_3\"},\"range\":2.5},{\"name\":\"SIG_4\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_4\"},\"range\":2.5},{\"name\":\"SIG_5\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_5\"},\"range\":2.5},{\"name\":\"SIG_6\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_6\"},\"range\":2.5},{\"name\":\"SIG_7\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_7\"},\"range\":2.5}],\"codes\":[]}}","isConfigured":"false"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20210708.10.00.00","appVersion":"2.2.0","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","target":"Physical"}