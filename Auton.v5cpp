{"mode":"Text","textContent":"// Include the V5 Library\n#include \"vex.h\"\n#include <math.h>\n#include <cmath>\n#include <string>\n#include <tgmath.h>\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\n#define printB(a) Brain.Screen.print(a)\n#define _USE_MATH_DEFINES\n#define ForwardFor(a) spinFor(forward,(2*a/wheelDiam)*180/M_PI,degrees, false);localTime = a*100/globalVelocity\n#define ReverseFor(a) spinFor(reverse,(2*a/wheelDiam)*180/M_PI,degrees, false);localTime = a*100/globalVelocity\n#define The\n#define Then wait(localTime,seconds)\n#define And ;\n#define Go\n#define To\n\nint Brain_precision = 0, Console_precision = 0;\n\ndouble MaxMotorSpeed = 200;\ndouble globalTimeFinish = 60.00;\ndouble globalVelocity = 300;\nint globalPercVel = 50;\ndouble wheelDiam = 10.16;\ndouble localTime = 0;\ndouble botDiam = 38;\ndouble accelerate = 40;\n\ndouble vector [2] = {0, 0};\n\nvoid SetGlobalVelocity(int vel) {\n    Heavy.setVelocity(vel,percent);\n    Big.setVelocity(vel,percent);\n    Strong.setVelocity(vel,percent);\n    globalVelocity = (wheelDiam*M_PI*vel/100)*200;\n}\n\nvoid VectorMove(double vect [2]) {\n    vector[0] += vect[0];\n    vector[1] += vect[1];\n    //d=vt\n    //t=d/v\n    //d/t=v\n    double longOpp = std::max(vector[0],vector[1]);\n    double timeOpp = longOpp*100/globalVelocity;\n    double velOpp1 = vector[0]*globalVelocity/100;\n    double velOpp2 = vector[1]*globalVelocity/100;\n    printB(longOpp);\n    printB(\"   \");\n    printB(velOpp1);\n    printB(\"   \");\n    printB(velOpp2);\n    printB(\"   \");\n    printB(timeOpp);\n    \n}\n\nvoid Forward(double d) {\n    Heavy.ForwardFor(d);\n    Big.ReverseFor(d);\n}\n\nvoid Back(double d) {\n    Heavy.ReverseFor(d); //D=Distance \n    Big.ForwardFor(d);\n}\n\nvoid Right(double d) {\n    Strong.ForwardFor(d);\n}\n\nvoid Left(double d) {\n    Strong.ReverseFor(d);\n}\n\n// \"when started\" hat block\nint whenStarted1() {\n    SetGlobalVelocity(globalPercVel);\n    return 0;\n}\n\nvoid Turn(double deg) {\n    double botCirc = botDiam * M_PI;\n    double perc = std::abs(deg/360);\n    double d = perc * botCirc;\n    if (deg > 0) {\n        Heavy.ForwardFor(d);\n        Big.ForwardFor(d);\n    }\n    else if (deg < 0) {\n        Heavy.ReverseFor(d);\n        Big.ReverseFor(d);\n    }\n}\n\nvoid GradualStop(std::string option) {\n    int i = globalPercVel;\n    if (option == \"forward\") {\n        while (i >= 1) {\n                i = i-1;\n                SetGlobalVelocity(i);\n                Heavy.spin(forward);\n                Big.spin(reverse);\n                wait(2/accelerate,seconds);\n                globalPercVel = i;\n            }\n        Heavy.stop();\n        Big.stop();\n    }\n    else if (option == \"back\") {\n        while (i >= 1) {\n                i = i-1;\n                SetGlobalVelocity(i);\n                Heavy.spin(reverse);\n                Big.spin(forward);\n                wait(2/accelerate,seconds);\n                globalPercVel = i;\n            }\n        Heavy.stop();\n        Big.stop();\n    }\n    else if (option == \"right\") {\n        while (i >= 1) {\n                i = i-1;\n                SetGlobalVelocity(i);\n                Strong.spin(forward);\n                wait(2/accelerate,seconds);\n                globalPercVel = i;\n            }\n        Strong.stop();\n    }\n    else if (option == \"left\") {\n        while (i >= 1) {\n                i = i-1;\n                SetGlobalVelocity(i);\n                Strong.spin(reverse);\n                wait(2/accelerate,seconds);\n                globalPercVel = i;\n            }\n        Strong.stop();\n    }\n} // options: forward, back, right, left\n\nvoid GradualForward(int vel,double dist = 10) {\n    SetGlobalVelocity(1);\n    int i = 1;\n    double degr = (2*dist/wheelDiam)*180/M_PI/2;\n    while(i < vel && Heavy.rotation(deg)-Big.rotation(deg) < degr*2) {\n        SetGlobalVelocity(i);\n        i++;\n        Heavy.spin(forward);\n        Big.spin(reverse);\n        wait(2/accelerate,seconds);\n        globalPercVel = i;\n    }\n    while(Heavy.rotation(deg)-Big.rotation(deg) < degr*2) {\n        wait(0.01,seconds);\n    }\n    GradualStop(\"forward\");\n}\n\nvoid GradualBack(int vel) {\n    SetGlobalVelocity(1);\n    int i = 1;\n    while(i < vel) {\n        SetGlobalVelocity(i);\n        i++;\n        Heavy.spin(reverse);\n        Big.spin(forward);\n        wait(2/accelerate,seconds);\n        globalPercVel = i;\n    }\n}\n\nvoid GradualRight(int vel) {\n    SetGlobalVelocity(1);\n    int i = 1;\n    while(i < vel) {\n        SetGlobalVelocity(i);\n        i++;\n        Strong.spin(forward);\n        wait(2/accelerate,seconds);\n        globalPercVel = i;\n    }\n}\n\nvoid GradualLeft(int vel) {\n    SetGlobalVelocity(1);\n    int i = 1;\n    while(i < vel) {\n        SetGlobalVelocity(i);\n        i++;\n        Strong.spin(reverse);\n        wait(2/accelerate,seconds);\n        globalPercVel = i;\n    }\n}\n\nint main() {\n  whenStarted1();\n  //di = 20cm\n  //circ = di*pi\n  //d = (deg*pi/180)*di/2\n  //if di is measured in centimeters\n  //d will be in centimeters as a result\n  //rpm\n  //centimeters\n  //tape width = 2cm\n  //large tile = 62cm\n  //small tile = 58cm\n  //med tile = 60cm\n  //to tape = 116cm\n  //tape gap = 2cm\n  // velocity per degree\n  // distance per velocity\n  // what is the distance traveled when stopping at each level of velocity\n  GradualForward(50,80);\n  //t = ((d-2*pow(v_f-v_i,2)/accelerate)/v_f)+2*((v_f-v_i)/accelerate);\n  //wait(t,seconds);\n  // dynamic motor command structure\n  //motor(50,100),motor(100,20) => motor(150,120)\n}","textLanguage":"cpp","rconfig":[{"port":[1],"name":"Heavy","customName":true,"deviceType":"Motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[2],"name":"Big","customName":true,"deviceType":"Motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[3],"name":"Strong","customName":true,"deviceType":"Motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[],"name":"Controller1","customName":false,"deviceType":"Controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22},{"port":[4],"name":"GPS4","customName":false,"deviceType":"GPS","setting":{"xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180","id":"partner"},"triportSourcePort":22}],"slot":1,"platform":"V5","sdkVersion":"20210708.10.00.00","appVersion":"2.0.8","fileFormat":"1.0.0","icon":""}